«IMPORT SMVC»

«EXTENSION template::GeneratorExtension»

«DEFINE main FOR SMVCApplication»
	«EXPAND entityClass("entity") FOREACH entities-»
	«EXPAND daoClass("dao") FOREACH daos-»
	«EXPAND servlets("web") FOREACH controller.typeSelect(EntityController)-»
	«EXPAND indexPage FOR homeController-»
	«EXPAND webPages(homeController) FOREACH controller.typeSelect(EntityController)-»
    «EXPAND staticPages(homeController) FOREACH controller-»
    «EXPAND genXML("web") FOR this-»
«ENDDEFINE»

«DEFINE entityClass(String packageName) FOR Entity-»
	«FILE srcFolder()+packageName+"/"+name+".java"-»
package «packageName»;

import java.io.Serializable;
import java.util.*;

import javax.persistence.*;

@Entity
@Table(name = "«name.toUpperCase()»")
public class «name» implements Serializable {
	
	public «name»() {
	}
	
	@Id
    @GeneratedValue
    @Column(name = "«name.toUpperCase()»_DBID")
    private Long «name.toLowerCase()»DbID;

    public Long get«name»DbID() {
        return «name.toLowerCase()»DbID;
    }
	
	«FOREACH attributes AS att»
    «IF att.type.toString().matches("OID")»
    @Column(name = "«att.name.toUpperCase()»", nullable = false, unique = true)
    «EXPAND genAttSetterGetter(getAttType(att), att.name.toLowerCase())»
    «ELSEIF att.type.toString().matches("VOID")»
    «IF att.multiValued == true»
    @OneToMany(cascade = {CascadeType.PERSIST, CascadeType.MERGE,
            CascadeType.REMOVE}, mappedBy = "«att.complexType.attributes.selectFirst(e|e.complexType == this).name»")
    «EXPAND genAttSetterGetter("List<"+att.complexType.name+">", att.name.toLowerCase())»
    «ELSE»
    @ManyToOne
    @JoinColumn(name = "FK_«att.complexType.name.toUpperCase()»_DBID")
    «EXPAND genAttSetterGetter(att.complexType.name, att.name.toLowerCase())»
    «ENDIF»
    «ELSE»
    @Column(name = "«att.name.toUpperCase()»")
    «EXPAND genAttSetterGetter(getAttType(att), att.name.toLowerCase())»
    «ENDIF»
	«ENDFOREACH»
	«EXPAND genMethods(attributes.select(e|e.type.toString()=="OID").name.first().toLowerCase())»
}
		«REM»...here...«ENDREM»
	«ENDFILE-»
«ENDDEFINE»

«DEFINE genAttSetterGetter(String type, String name) FOR Entity»
    private «type» «name»;
    
    public «type» get«name.toFirstUpper()»() {
        return «name»;
    }
    
    public void set«name.toFirstUpper()»(final «type» «name») {
        this.«name» = «name»;
    }
«ENDDEFINE»

«DEFINE genMethods(String oid) FOR Entity»
    @Override
    public boolean equals(Object obj) {
        if (!(obj instanceof «name»))
            return false;
        «name» other«name» = («name») obj;
        if (((«oid» != null && «oid».equals(other«name».«oid»)) || «oid» == other«name».«oid»)) {
            return true;
        }
        return false;
    }

    @Override
    public int hashCode() {
        int result = 17;
        result *= 31 + («oid» == null ? 0 : «oid».hashCode());
        return result;
    }
«ENDDEFINE»
«DEFINE daoClass(String packageName) FOR DataAccessObject-»
    «FILE srcFolder()+packageName+"/"+name+".java"-»
package «packageName»;

import java.util.*;

import org.hibernate.Session;

import entity.*;


public class «name»  implements  DAO<«name.replaceAll("DAO"," " )»>{

 public void delete(final long id){
  Session session = HibernateUtil.getSessionFactory().getCurrentSession();
  «name.replaceAll("DAO","" )»  «name.replaceAll("DAO","" ).toFirstLower()» = («name.replaceAll("DAO","" )» ) session.load(«name.replaceAll("DAO","" )» .class, id);
  session.delete(«name.replaceAll("DAO","" ).toFirstLower()»);
 
 }
 public «name.replaceAll("DAO"," " )» load(final long id){
  Session session = HibernateUtil.getSessionFactory().getCurrentSession();
  «name.replaceAll("DAO","" )»  «name.replaceAll("DAO","" ).toFirstLower()» = («name.replaceAll("DAO","" )») session.load(«name.replaceAll("DAO","" )».class, id);
  return «name.replaceAll("DAO","" ).toFirstLower()»;
 } 
 public List<«name.replaceAll("DAO"," " )»> loadAll(){
  Session session = HibernateUtil.getSessionFactory().getCurrentSession();
  List<«name.replaceAll("DAO","" )»> result = session.createQuery("SELECT l FROM «name.replaceAll("DAO","" )» l").list();
  
  return result;
 }
 public void persist(final «name.replaceAll("DAO","" )»  «name.replaceAll("DAO","" ).toFirstLower()») {
  Session session = HibernateUtil.getSessionFactory().getCurrentSession();
  session.saveOrUpdate(«name.replaceAll("DAO","" ).toFirstLower()»);
 }
 public void update(final «name.replaceAll("DAO","" )»  «name.replaceAll("DAO","" ).toFirstLower()») {
  Session session = HibernateUtil.getSessionFactory().getCurrentSession();
  session.saveOrUpdate(«name.replaceAll("DAO","" ).toFirstLower()»);
 }
}
        «REM»...here...«ENDREM»
    «ENDFILE-»
«ENDDEFINE»

«DEFINE servlets(String packageName) FOR EntityController-»
    «FILE srcFolder()+packageName+"/"+page.title+"Servlet.java"-»
package «packageName»;

import java.io.IOException;
import java.util.*;

import javax.servlet.*;
import javax.servlet.http.*;

import dao.*;
import entity.*;

public class «page.title»Servlet extends HttpServlet {
    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp)
            throws ServletException, IOException {
    «IF operation.toString().matches("readALL")-»        
        List<«dao.forEntity.name»> «dao.forEntity.name.toLowerCase()»Entries = new «dao.name»().loadAll();
        req.setAttribute("«dao.forEntity.name.toLowerCase()»Entries", «dao.forEntity.name.toLowerCase()»Entries);
    «ENDIF-»
    «IF operation.toString().matches("delete") || operation.toString().matches("update") || operation.toString().matches("readONE")»
        long «dao.forEntity.name.toLowerCase()»DbID = Long.parseLong(req.getParameter("«dao.forEntity.name.toLowerCase()»DbID"));
        «dao.forEntity.name» «dao.forEntity.name.toLowerCase()» = new «dao.name»().load(«dao.forEntity.name.toLowerCase()»DbID);
        req.setAttribute("«dao.forEntity.name.toLowerCase()»", «dao.forEntity.name.toLowerCase()»);
    «ENDIF-»
    «IF !subController.isEmpty-»
        «FOREACH subController.typeSelect(EntityController) AS sc-»
        «IF sc.operation.toString().matches("readALL")-»
        req.setAttribute("«sc.dao.forEntity.name.toLowerCase()»Entries", «dao.forEntity.name.toLowerCase()».get«dao.forEntity.attributes.selectFirst(e|e.complexType.name == sc.dao.forEntity.name).name.toFirstUpper()»());      
        «ELSE-»
        req.setAttribute("«sc.dao.forEntity.name.toLowerCase()»", «dao.forEntity.name.toLowerCase()».get«dao.forEntity.attributes.selectFirst(e|e.complexType.name == sc.dao.forEntity.name).name.toFirstUpper()»());
        «ENDIF-»
        «ENDFOREACH-» 
    «ENDIF-»
    «IF operation.toString().matches("update") || operation.toString().matches("_create")-» 
        «FOREACH dao.forEntity.attributes.select(e|e.complexType != null) AS ct-»
        List<«ct.complexType.name»> «ct.complexType.name.toLowerCase()»Entries = new «ct.complexType.name»DAO().loadAll();
        req.setAttribute("«ct.complexType.name.toLowerCase()»Entries", «ct.complexType.name.toLowerCase()»Entries);
        «ENDFOREACH-»
    «ENDIF-»  
        req.getRequestDispatcher("«url.replaceAll("/", "")».jsp").forward(req, resp);
    }

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp)
            throws ServletException, IOException {
    «IF operation.toString().matches("delete") || operation.toString().matches("update") || operation.toString().matches("_create")-»
        try {
        «IF operation.toString().matches("delete")-»
            long «dao.forEntity.name.toLowerCase()»DbID = Long
                    .parseLong(req.getParameter("«dao.forEntity.name.toLowerCase()»DbID"));
            new «dao.name»().delete(«dao.forEntity.name.toLowerCase()»DbID);    
        «ELSEIF operation.toString().matches("update")-»
            long «dao.forEntity.name.toLowerCase()»DbID = Long
                    .parseLong(req.getParameter("«dao.forEntity.name.toLowerCase()»DbID"));
            «dao.forEntity.name» «dao.forEntity.name.toLowerCase()» = new «dao.name»().load(«dao.forEntity.name.toLowerCase()»DbID);
            if («dao.forEntity.name.toLowerCase()» == null) {
                «dao.forEntity.name.toLowerCase()» = new «dao.forEntity.name»();
            }
            «EXPAND setAttributes(dao)»
            new «dao.name»().update(«dao.forEntity.name.toLowerCase()»);        
        «ELSE-»
            «dao.forEntity.name» «dao.forEntity.name.toLowerCase()» = new «dao.forEntity.name»();
            «EXPAND setAttributes(dao)»
            new «dao.name»().persist(«dao.forEntity.name.toLowerCase()»);
        «ENDIF-»
            resp.sendRedirect("«returnOKURL.replaceFirst("/", "")»");
        } catch(Exception e) {
            e.printStackTrace();
            resp.sendRedirect("«returnKOURL.replaceFirst("/", "")».html");           
        }
    «ELSE-»
            super.doPost(req, resp); 
    «ENDIF-» 
    }
}
    «ENDFILE-»
«ENDDEFINE»

«DEFINE setAttributes(SMVC::DataAccessObject dao) FOR EntityController»
        «FOREACH dao.forEntity.attributes.select(e|e.complexType == null) AS ct»
            «IF !getAttType(ct).matches("String")-»
            «getAttType(ct)» «ct.name.toLowerCase()» = «getAttType(ct)».parse«getAttType(ct)»(req.getParameter("«ct.name.toLowerCase()»"));
            «ELSE-»
            «getAttType(ct)» «ct.name.toLowerCase()» = req.getParameter("«ct.name.toLowerCase()»");                           
            «ENDIF-»
            «dao.forEntity.name.toLowerCase()».set«ct.name.toFirstUpper()»(«ct.name.toLowerCase()»);
        «ENDFOREACH»
        «FOREACH dao.forEntity.attributes.select(e|e.complexType != null) AS ct»
            long «ct.complexType.name.toLowerCase()»DbID = Long.parseLong(req.getParameter("«ct.complexType.name.toLowerCase()»"));
            «ct.complexType.name» «ct.complexType.name.toLowerCase()» = new «ct.complexType.name»DAO().load(«ct.complexType.name.toLowerCase()»DbID);
            «dao.forEntity.name.toLowerCase()».set«ct.complexType.name»(«ct.complexType.name.toLowerCase()»);
        «ENDFOREACH»
«ENDDEFINE»

«DEFINE indexPage FOR Controller-»
    «FILE webContentFolder()+page.title+".html"-»
<html>
<title>«page.title»</title>
<body>
<h1>«page.title»</h1>

<a href="«page.title».html">Home</a>

«FOREACH page.links.url AS uri SEPARATOR "&nbsp;"-»
<a href="«uri.replaceFirst("/", "")»">«uri.replaceFirst("/", "")»</a>
«ENDFOREACH -»
<p></p>
</body>
</html>
    «ENDFILE-»
«ENDDEFINE»

«DEFINE webPages(Controller home) FOR EntityController-»
    «FILE webContentFolder()+page.title+".jsp"-»
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<html>
<title>«page.title»</title>
<body>
<h1>«page.title»</h1>
<a href="«home.url.replaceFirst("/", "")».html">Home</a>&nbsp;
    «EXPAND genWebContent FOR this-»
«IF !this.subController.isEmpty-»
«FOREACH this.subController.typeSelect(EntityController) AS subct SEPARATOR "<br>"-»
«FILE webContentFolder()+"Inner"+subct.page.title+".jsp"-»   
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<h3>«subct.page.title»</h3>
«EXPAND genWebContent FOR subct-»
«ENDFILE-»
<c:import url = "Inner«subct.page.title».jsp">
«IF subct.operation.toString().matches("readALL")-»
<c:param name = "«subct.dao.forEntity.name.toLowerCase()»Entries" value = "${requestScope.«subct.dao.forEntity.name.toLowerCase()»Entries}"/>
«ELSE-»
<c:param name = "«subct.dao.forEntity.name.toLowerCase()»" value = "${requestScope.«subct.dao.forEntity.name.toLowerCase()»}"/>
«ENDIF-»
</c:import>
«ENDFOREACH-»
«ENDIF-»
</body>
</html>   
    «ENDFILE-»
«ENDDEFINE»


«DEFINE staticPages(Controller home) FOR Controller-»
    «IF this.metaType.toString().matches("SMVC::Controller")»
    «FILE webContentFolder()+page.title+".html"-»    
<html>
<title>«page.title»</title>
<body>
<h1>«page.title»</h1>

<a href="«home.url.replaceFirst("/", "")».html">Home</a>&nbsp;

<p>«page.view.text»</p>
</body>
</html>
    «ENDFILE-»
    «ENDIF»
«ENDDEFINE»


«DEFINE genWebContent FOR EntityController-»
<p>«page.view.text»</p>
    «IF operation.toString().matches("readALL")-»
    «EXPAND readAllOp FOR this-»
    «ELSEIF operation.toString().matches("readONE")-»
    «EXPAND readOneOp FOR this-»
    «ELSEIF operation.toString().matches("_create")-»
    «EXPAND createOp FOR this-»
    «ELSEIF operation.toString().matches("update")-»
    «EXPAND updateOp FOR this-»
    «ELSEIF operation.toString().matches("delete")-»
    «EXPAND deleteOp FOR this-»
    «ENDIF-»
«ENDDEFINE»

«DEFINE readAllOp FOR EntityController-»
«FOREACH page.view.components.typeSelect(SMVC::^List) AS list-» 
    «FOREACH list.supportedOperations AS supop-»
    «IF supop.operationKind.toString().matches("_create")-»  
    <a href="«supop.url.replaceFirst("/","")»">«getOperationKindGer(supop)»</a>
    «ENDIF-»
    «ENDFOREACH-»
«ENDFOREACH-»
    <table border="1">
        <thead>
            <tr>
            «FOREACH this.dao.forEntity.attributes AS att-»
                «IF att.multiValued == false-»    
                <td align="center"><b>«att.name.toFirstUpper()»</b></td>
                «ENDIF-»
            «ENDFOREACH-»
                <td colspan="1»">&nbsp;</td>
            </tr>
        </thead>
        <tbody>
            <c:forEach var="«this.dao.forEntity.name.toLowerCase()»" items="${«this.dao.forEntity.name.toLowerCase()»Entries}">
            <tr>
            «FOREACH this.dao.forEntity.attributes AS att-»
                «IF att.multiValued == false-»
                «IF att.type.toString().matches("VOID")-»
                <td><c:out value="${«this.dao.forEntity.name.toLowerCase()».«att.name.toLowerCase()».«att.complexType.attributes.selectFirst(e|e.type.toString() == "OID").name.toLowerCase()»}"/></td>    
                «ELSE-»
                <td><c:out value="${«this.dao.forEntity.name.toLowerCase()».«att.name.toLowerCase()»}"/></td>   
                «ENDIF-»
                «ENDIF-»
            «ENDFOREACH-» 
            «FOREACH page.view.components.typeSelect(SMVC::^List) AS list-» 
                «FOREACH list.supportedOperations AS supop-»
                «IF !supop.operationKind.toString().matches("_create")-»  
                <td><a href="«supop.url.replaceFirst("/", "")»?«dao.forEntity.name.toLowerCase()»DbID=${«this.dao.forEntity.name.toLowerCase()».«this.dao.forEntity.name.toLowerCase()»DbID}">«getOperationKindGer(supop)»</a></td>
                «ENDIF-»
                «ENDFOREACH-»
            «ENDFOREACH-» 
            </tr>
            </c:forEach>
        </tbody>
    </table>
«ENDDEFINE»

«DEFINE readOneOp FOR EntityController-»
    <table>
    «FOREACH dao.forEntity.attributes AS att-»
        <tr>
        «IF att.multiValued == false-»
            <td><em>«att.name.toFirstUpper()»:</em></td>
            «IF att.type.toString().matches("VOID")-»
            <td><c:out value='${«dao.forEntity.name.toLowerCase()».«att.name.toLowerCase()»["«att.complexType.attributes.selectFirst(e|e.type.toString() == "OID").name.toLowerCase()»"]}'/></td>    
            «ELSE-»
            <td><c:out value='${«dao.forEntity.name.toLowerCase()»["«att.name.toLowerCase()»"]}'/></td>   
            «ENDIF-»
        «ENDIF-»
        </tr>
     «ENDFOREACH-» 
    </table>   
«ENDDEFINE»

«DEFINE createOp FOR EntityController-»
    <form method="POST" action="«page.title»">
    <table>
        «FOREACH dao.forEntity.attributes AS att-»
        <tr>
        «IF att.complexType == null-»
            <td><em>«att.name»:</em></td>
            <td><input name="«att.name.toLowerCase()»" type="text" size="40" maxlength="80"/></td>        
        «ELSE-»
            <td><em>«att.complexType.name»:</em></td>
            <td>
                <select name="«att.complexType.name.toLowerCase()»" size="1">
                <c:forEach var="«att.complexType.name.toLowerCase()»Entry" items="${«att.complexType.name.toLowerCase()»Entries}">
                    <option value='${«att.complexType.name.toLowerCase()»Entry["«att.complexType.name.toLowerCase()»DbID"]}'>
                        ${«att.complexType.name.toLowerCase()»Entry["«att.complexType.attributes.selectFirst(e|e.type.toString().matches("OID")).name.toLowerCase()»"]}
                    </option>
                </c:forEach>
                </select> 
            </td>
        «ENDIF-»
        </tr>    
        «ENDFOREACH-»
    </table>
    <input type="SUBMIT" value=" Erstellen "/>
    </form>
«ENDDEFINE»

«DEFINE updateOp FOR EntityController-»
    <form method="POST" action="«page.title»">
    <table>
        «FOREACH dao.forEntity.attributes AS att-»
        <tr>
        «IF att.complexType == null-»
            <td><em>«att.name»:</em></td>
            <td><input name="«att.name.toLowerCase()»" type="text" size="40" maxlength="80" value='${«dao.forEntity.name.toLowerCase()»["«att.name.toLowerCase()»"]}'/></td>       
        «ELSE-»
            <td><em>«att.complexType.name»:</em></td>
            <td>
                <select name="«att.complexType.name.toLowerCase()»" size="1">
                <c:forEach var="«att.complexType.name.toLowerCase()»Entry" items="${«att.complexType.name.toLowerCase()»Entries}">
                    <option value='${«att.complexType.name.toLowerCase()»Entry["«att.complexType.name.toLowerCase()»DbID"]}' <c:if test='${«dao.forEntity.name.toLowerCase()».«att.complexType.name.toLowerCase()»["«att.complexType.name.toLowerCase()»DbID"] eq «att.complexType.name.toLowerCase()»Entry["«att.complexType.name.toLowerCase()»DbID"]}'>selected</c:if>>
                        ${«att.complexType.name.toLowerCase()»Entry["«att.complexType.attributes.selectFirst(e|e.type.toString().matches("OID")).name.toLowerCase()»"]}
                    </option>
                </c:forEach> 
                </select>
            </td>
        «ENDIF»
        </tr>    
        «ENDFOREACH-»
    </table>
    <input type="HIDDEN" name="«dao.forEntity.name.toLowerCase()»DbID" value='${«dao.forEntity.name.toLowerCase()»["«dao.forEntity.name.toLowerCase()»DbID"]}'/>
    <input type="SUBMIT" value=" Update "/>
    </form>
«ENDDEFINE»

«DEFINE deleteOp FOR EntityController-»
    <form method="POST" action="«page.title»">
    <table>
        «FOREACH dao.forEntity.attributes AS att-»
        <tr>
        «IF att.complexType == null-»
            <td><em>«att.name»:</em></td>
            <td><c:out value='${«dao.forEntity.name.toLowerCase()»["«att.name.toLowerCase()»"]}'/></td>       
        «ELSE-»
            <td><em>«att.complexType.name»:</em></td>
            <td><c:out value='${«dao.forEntity.name.toLowerCase()».«att.complexType.name.toLowerCase()»["«att.complexType.attributes.selectFirst(e|e.type.toString().matches("OID")).name.toLowerCase()»"]}'/></td>
        «ENDIF-»
        </tr>    
        «ENDFOREACH-»
    </table>
    <input type="HIDDEN" name="«dao.forEntity.name.toLowerCase()»DbID" value='${«dao.forEntity.name.toLowerCase()»["«dao.forEntity.name.toLowerCase()»DbID"]}'/>
    <input type="SUBMIT" value=" Löschen "/>
    </form>
«ENDDEFINE»

«DEFINE genXML(String file) FOR SMVCApplication-»
    «FILE xmlFolder()+file+".xml"-»
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<web-app xmlns="http://java.sun.com/xml/ns/j2ee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="2.4" xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee   http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd">
    <welcome-file-list>
        <welcome-file>«homeController.page.title».html</welcome-file>
    </welcome-file-list>
    «PROTECT CSTART "<!--" CEND "-->" ID file+".xml"» 
    <filter>
        <description>
        </description>
        <display-name>HibernateFilter</display-name>
        <filter-name>HibernateFilter</filter-name>
        <filter-class>web.HibernateSessionRequestFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>HibernateFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
    «ENDPROTECT»
    «FOREACH controller.typeSelect(EntityController) AS servlet»
    <servlet>
        <servlet-name>«servlet.page.title»</servlet-name>
        <servlet-class>web.«servlet.page.title»Servlet</servlet-class>
    </servlet>
    «ENDFOREACH»
    «FOREACH controller.typeSelect(EntityController) AS servlet»
    <servlet-mapping>
        <servlet-name>«servlet.page.title»</servlet-name>
        <url-pattern>/«servlet.page.title»</url-pattern>
    </servlet-mapping>
    «ENDFOREACH»
</web-app>
    «ENDFILE»
«ENDDEFINE»