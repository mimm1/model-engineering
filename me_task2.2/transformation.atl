-- @path smvcml=/me_task2.2/metamodels/smvcml.ecore
-- @path swml=/me_task2.2/metamodels/swml.ecore

module transformation;
create OUT : smvcml from IN : swml;


-- CONTENTMODEL

-- Fehlend: Entity Professor und Assisten erben die Attribute von Professor (superEntity!)
--			ID Attribute zu OID mapping fehlt

helper context swml!EntityType def :
	allAttributes : Sequence(swml!Attribute) =
	self.attribute->union(
		if not self.superEntityType.oclIsUndefined() then
		self.superEntityType.allAttributes->select(attribute |
		not self.attribute->exists(at | at.name = attribute.name)
		)
		else Sequence {}
		endif
	)->flatten();

helper context swml!EntityType def :
	allRelationships : Sequence(swml!Relationship) =
	let defAssoc : swml!Relationship =
		swml!Relationship.allInstances()->select(assoc |
		assoc.entityType = self) in
		defAssoc->union(
		if not self.superEntityType.oclIsUndefined() then
		self.superEntityType.allRelationships
		else Sequence {}
		endif
	)->flatten();

helper context swml!EntityType def :
	allIDAttributes : Sequence(swml!Attribute) =
		self.id->union(Sequence{})->flatten();

rule WebApplication2SMVCApplication{
	from
		w: swml!WebApplication,
		c: swml!ContentModel,
		h: swml!HypertextModel
		
	to
		out: smvcml!SMVCApplication(
			name <- w.name,	
			entities <- c.entityType,
			daos <- c.entityType,
			homeController <- h.homepage,
			controller <- h.page
		)
	
}




rule EntityType2Entity{
	from
		e: swml!EntityType
		
		
	to
		out: smvcml!Entity (
			name <- e.name,
			attributes <- e.allAttributes,
			--attributes <- if e.superEntityType.
			--attributes <- e.superEntityType.id,
			attributes <- e.id,
			attributes <- e.allRelationships
			
		
		),
		

		o: smvcml!DataAccessObject (
			
			name <- e.name+'DAO',
			forEntity <- e,
			showDirectInstancesOnly <- not e.isAbstract
		)
	--do{	
--			if(e.superEntityType) {
				
--			}
			
		
			--if e.superEntityType
			--then 
			--	attributes <- e.superEntityType.attribute
			--else
			--	'this case should never occure'
			--endif
			--then attributes <- e.superEntityType.attribute,				
			--endif
				
			
--}		
	
	

}



rule Attribute2Attribute{
	from
		a: swml!Attribute
	--	r: swml!EntityType

	to
		out: smvcml!Attribute(
			
			name <- a.name,
			type <- if a.type.toString() = 'String' or not a.EnumType.oclIsUndefined() or a.type.toString() = 'Date' or a.type.toString() = 'Time' or a.type.toString() = 'Email' then #VARCHAR 
			else if a.type.toString() = 'Float' then #DOUBLE else #BIGINTEGER endif endif,
			multiValued <-	false 
			--type <- a

	)
}

rule Relationship2Attribute{
	from
		
		r: swml!Relationship
	to
		out: smvcml!Attribute(
			
			
			name <- r.name,
			multiValued <- if r.upper <= -1 then true else false endif,	
			type <- #VOID,
			complexType <- r.target
	)
}
-- AB HIER HYPERTEXTMODEL


rule Page2Page {
	from
		--d: swml!DynamicPage,
		--s: swml!StaticPage
		--h: swml!HypertextModel
		
		p: swml!Page 
		(p.oclIsTypeOf(swml!Page))
		
	to
		out: smvcml!Page(
			--title <- d.name,
--			title <- s.name
			title <- p.name
		
		)
	
}

rule StaticPage2Controller{
	from
		s: swml!StaticPage 
--		(s.oclIsTypeOf(source!StaticPage))
		

	to
		out: smvcml!Controller(
			url <- '/'+s.name			
			
		)
		
	
}
-- url vererben funkt nicht!!
rule DynamicPage2EntityController {
	from
		
		d: swml!DynamicPage
		
--		ok: swml!OKLink
--		ko: swml!KOLink
--		p: swml!Parameter
		
	to
		out: smvcml!EntityController(
			
--			returnOKURL <- if d.link = true then
--				d.name
--			 else
--			 	''
--			endif,
			
--			returnKOURL <- ko.source,
			dao <- d.displayedEntityType,
			url <- '/'+d.name
			
		)
	
}


