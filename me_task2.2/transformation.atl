-- @path smvcml=/me_task2.2/metamodels/smvcml.ecore
-- @path swml=/me_task2.2/metamodels/swml.ecore

module transformation;
create OUT : smvcml from IN : swml;


-- CONTENTMODEL

-- Fehlend: Entity Professor und Assisten erben die Attribute von Professor (superEntity!)
--			ID Attribute zu OID mapping fehlt
--			DAO und Controller befinden sich nicht innerhalb von SMVCApplication!
helper context swml!EntityType def :
	allAttributes : Sequence(swml!Attribute) =
	self.attribute->union(
		if not self.superEntityType.oclIsUndefined() then
		self.superEntityType.allAttributes->select(attribute |
		not self.attribute->exists(at | at.name = attribute.name)
		)
		else Sequence {}
		endif
	)->flatten();

helper context swml!EntityType def :
	allRelationships : Sequence(swml!Relationship) =
	let defAssoc : swml!Relationship =
		swml!Relationship.allInstances()->select(assoc |
		assoc.entityType = self) in
		defAssoc->union(
		if not self.superEntityType.oclIsUndefined() then
		self.superEntityType.allRelationships
		else Sequence {}
		endif
	)->flatten();

helper context swml!EntityType def :
	allIDAttributes : Sequence(swml!Attribute) =
		self.id->union(Sequence{})->flatten();



rule WebApplication2SMVCApplication{
	from
		w: swml!WebApplication,
		c: swml!ContentModel,
		h: swml!HypertextModel
		
	to
		out: smvcml!SMVCApplication(
			name <- w.name,	
			entities <- c.entityType,
			controller <- h.page,
			homeController <- h.homepage
		)
		
	do {
		    for(d in swml!EntityType.allInstances()) {
            	 out.daos <- thisModule.resolveTemp(d, 'o'); 
			}
		    for(p in swml!Page.allInstances()) {
		    	if (not p.oclIsTypeOf(swml!LinkJoinNode))
		    	out.controller <- thisModule.resolveTemp(p, 'o');
		    }
		    for(p in swml!Page.allInstances()) {
		    	if (not p.oclIsTypeOf(swml!LinkJoinNode))
		    	out.controller <- thisModule.resolveTemp(p, 'out2');
		    }
		    
	}
}


rule EntityType2Entity{
	from
		e: swml!EntityType
		
		
	to	
		
		out: smvcml!Entity (
			name <- e.name,
			attributes <- e.allAttributes,
			--attributes <- if e.superEntityType.
			--attributes <- e.superEntityType.id,
			attributes <- e.id,
			attributes <- e.allRelationships
		),
		
		o: smvcml!DataAccessObject (
			
			name <- e.name+'DAO',
			forEntity <- e,
			showDirectInstancesOnly <- not e.isAbstract
		)



	--do{	
--			if(e.superEntityType) {
				
--			}
			
		
			--if e.superEntityType
			--then 
			--	attributes <- e.superEntityType.attribute
			--else
			--	'this case should never occure'
			--endif
			--then attributes <- e.superEntityType.attribute,				
			--endif
				
			
--}		
	
}	





rule Attribute2Attribute{
	from
		a: swml!Attribute
	--	r: swml!EntityType

	to
		out: smvcml!Attribute(
			
			name <- a.name,
			type <- if a.type.toString() = 'String' or not a.EnumType.oclIsUndefined() or a.type.toString() = 'Date' or a.type.toString() = 'Time' or a.type.toString() = 'Email' then #VARCHAR 
			else if a.type.toString() = 'Float' then #DOUBLE else #BIGINTEGER endif endif,
			multiValued <-	false 
			--type <- a

	)
}

rule Relationship2Attribute{
	from
		
		r: swml!Relationship
	to
		out: smvcml!Attribute(
			
			
			name <- r.name,
			multiValued <- if r.upper <= -1 then true else false endif,	
			type <- #VOID,
			complexType <- r.target
	)
}
-- AB HIER HYPERTEXTMODEL

--Fehler: Entity Controller Leitungen, EntityController Prufeungen und Page Details müssen bei EntityController LVADetails rein


rule StaticPage2Controller {
	from		
		p: swml!Page 
		(p.oclIsTypeOf(swml!StaticPage))
		
	to
		out: smvcml!Page(
			title <- p.name,
			links <- p.link
			
		
		),
		o: smvcml!Controller (
			url <- '/'+ p.name,
			page <- p
		)
	
}


rule IndexPage2EntityController{
	from
		p: swml!Page
		(p.oclIsTypeOf(swml!IndexPage))
	to
		out: smvcml!Page(
			title <- p.name
			),
		out2: smvcml!EntityController(
			dao <- p.displayedEntityType,
			url <- '/'+p.name,
			page <- p
		),
		out3: smvcml!List(
			
			entity <- p.displayedEntityType,
			supportedOperations <- p.link
		)
}

rule EntityPage2EntityController{
	from
		p: swml!Page
		(not p.oclIsTypeOf(swml!IndexPage) and not p.oclIsTypeOf(swml!StaticPage) and not p.oclIsTypeOf(swml!LinkJoinNode))
	to
		out: smvcml!Page(
			title <- p.name
			),
		out2: smvcml!EntityController(
			dao <- p.displayedEntityType,
			url <- '/'+p.name,
			page <- p
		),
		out3: smvcml!Form(
			
			entity <- p.displayedEntityType
		)
}

rule SupportedOperation2ContextualLink{
	from
		cl: swml!Link
		(cl.oclIsTypeOf(swml!ContextualLink))
	to
		out: smvcml!SupportedOperation(
		url <- cl.target.toString().regexReplaceAll('IN!', '/').regexReplaceAll(':swml!EntityPage', ' ').regexReplaceAll(':swml!DeletePage', ' ').regexReplaceAll(':swml!UpdatePage', ' ').regexReplaceAll(':swml!CreatePage', ' ')
			
		)
		

}

rule Link2Link{
	from
		l: swml!Link
		(l.oclIsTypeOf(swml!NonContextualLink))
		
	to
		out: smvcml!Link(
			url <- l.target.toString().regexReplaceAll('IN!', '/').regexReplaceAll(':swml!IndexPage', ' ')
	
		)
		
}
--called rule. aber keine ahnung wie ich die nun benutze (Page -> View und View -> Component!)
entrypoint rule View() {
	to
		v : smvcml!View
	do {
		thisModule.metamodel <- v;
	}
}



